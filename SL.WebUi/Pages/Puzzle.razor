@page "/puzzle/{name}"
@page "/puzzle/"
@using SL.Shared
@using SL.Shared.Structures
@inject NavigationManager NavigationManager
@inject IHostEnvironment HostEnvironment

<PageTitle>Puzzle</PageTitle>

@if (Error != null)
{
    <p><em>@Error</em></p>
}
@if (_game == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@Name</h1>

    <button class="btn btn-primary" @onclick="Reset">Reset</button>
    <button class="btn btn-primary" @onclick="Solve">Solve</button>
    <button class="btn btn-primary" @onclick="Undo">Undo</button>
    <button class="btn btn-primary" @onclick="Redo">Redo</button>

    var board = _game.Board;
    var scale = 27; // The table starts to deform (adding row height) if I use a smaller value than 27. What's taking up extra height?
    var width = scale * 2 * board.Columns + scale;
    var height = scale * 2 * board.Rows + scale;

    <table cellpadding="0" cellspacing="0" width="@width" height="@height">
        <tbody>

            @for (var r = 0; r <= board.Rows; r++)
            {
                <tr>
                    @{/* Line above */}
                    @for (int c = 0; c < board.Columns; c++)
                    {
                        var junction = board.GetJunction(r, c);
                        var north = junction.Edges[Direction.North];
                        var east = junction.Edges[Direction.East];
                        var south = junction.Edges[Direction.South];
                        var west = junction.Edges[Direction.West];
                        var row = r;
                        var column = c;

                        <td align="center" width="@scale" >
                            <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="50" cy="50" r="15" fill="black" />
                                @if (north?.HasLine == true)
                                {
                                    <line x1="50" y1="50" x2="50" y2="0" stroke="black" stroke-width="4" />
                                }
                                @if (east?.HasLine == true)
                                {
                                    <line x1="50" y1="50" x2="100" y2="50" stroke="black" stroke-width="4" />
                                }
                                @if (south?.HasLine == true)
                                {
                                    <line x1="50" y1="50" x2="50" y2="100" stroke="black" stroke-width="4" />
                                }
                                @if (west?.HasLine == true)
                                {
                                    <line x1="50" y1="50" x2="0" y2="50" stroke="black" stroke-width="4" />
                                }
                                @foreach (var inference in junction.Inferences)
                                {
                                    var x = 0;
                                    var y = 0;

                                    switch (inference.Direction1)
                                    {
                                        case Direction.North:
                                            y = 25;
                                            break;
                                        case Direction.East:
                                            x = 75;
                                            break;
                                        case Direction.South:
                                            y = 75;
                                            break;
                                        case Direction.West:
                                            x = 25;
                                            break;
                                    }
                                    switch (inference.Direction2)
                                    {
                                        case Direction.North:
                                            y = 25;
                                            break;
                                        case Direction.East:
                                            x = 75;
                                            break;
                                        case Direction.South:
                                            y = 75;
                                            break;
                                        case Direction.West:
                                            x = 25;
                                            break;
                                    }
                                    <line x1="50" y1="50" x2="@x" y2="@y" stroke="black" stroke-width="2" />
                                }
                            </svg>
                        </td>
                        <td align="center" width="@scale" @onclick="@(e => UpdateJunctionEdge(e, row, column, Direction.East))">
                            @switch (east.HasLine)
                            {
                                case null:
                                    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                        <line x1="0" y1="50" x2="100" y2="50" stroke="black" stroke-width="4" stroke-dasharray="5 10"/>
                                    </svg>
                                    break;
                                case true:
                                    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                        <line x1="0" y1="50" x2="100" y2="50" stroke="black" stroke-width="4" />
                                    </svg>
                                    break;
                                case false:
                                    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                        <line x1="35" y1="35" x2="65" y2="65" stroke="black" stroke-width="4" />
                                        <line x1="35" y1="65" x2="65" y2="35" stroke="black" stroke-width="4" />
                                    </svg>
                                    break;
                            }
                        </td>

                        if (c == board.Columns - 1)
                        {
                            junction = board.GetJunction(r, c + 1);
                            north = junction.Edges[Direction.North];
                            south = junction.Edges[Direction.South];
                            west = junction.Edges[Direction.West];
                            <td align="center" width="@scale">
                                <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <circle cx="50" cy="50" r="15" />
                                    @if (north?.HasLine == true)
                                    {
                                        <line x1="50" y1="50" x2="50" y2="0" stroke="black" stroke-width="4" />
                                    }
                                    @if (south?.HasLine == true)
                                    {
                                        <line x1="50" y1="50" x2="50" y2="100" stroke="black" stroke-width="4" />
                                    }
                                    @if (west?.HasLine == true)
                                    {
                                        <line x1="50" y1="50" x2="0" y2="50" stroke="black" stroke-width="4" />
                                    }
                                </svg>
                            </td>
                        }
                    }

                </tr>
                <tr>

                @{/* West line, hint, East line */}
                @for (int c = 0; c < board.Columns && r < board.Rows; c++)
                {
                    var cell = board[r, c];
                    var row = r;
                    var column = c;

                    var edge = cell.Edges[Direction.West];
                    <td align="center" @onclick="@(e => UpdateCellEdge(e, row, column, Direction.West))">
                        @switch (edge.HasLine)
                        {
                            case null:
                                <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <line x1="50" y1="0" x2="50" y2="100" stroke="black" stroke-width="4" stroke-dasharray="5 10"/>
                                </svg>
                                break;
                            case true:
                                <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <line x1="50" y1="0" x2="50" y2="100" stroke="black" stroke-width="4" />
                                </svg>
                                break;
                            case false:
                                <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <line x1="35" y1="35" x2="65" y2="65" stroke="black" stroke-width="4" />
                                    <line x1="35" y1="65" x2="65" y2="35" stroke="black" stroke-width="4" />
                                </svg>
                                break;
                        }
                    </td>

                    <td align="center">
                        <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                            <text x="25" y="80" font-size="100">@(cell.Hint?.ToString())</text>
                        </svg>
                    </td>


                    // if it's the last column, east line
                    if (c == board.Columns - 1)
                    {
                        edge = cell.Edges[Direction.East];

                        <td align="center" @onclick="@(e => UpdateCellEdge(e, row, column, Direction.East))">
                            @switch (edge.HasLine)
                            {
                                case null:
                                    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                        <line x1="50" y1="0" x2="50" y2="100" stroke="black" stroke-width="4" stroke-dasharray="5 10"/>
                                    </svg>
                                    break;
                                case true:
                                    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                        <line x1="50" y1="0" x2="50" y2="100" stroke="black" stroke-width="4" />
                                    </svg>
                                    break;
                                case false:
                                    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                        <line x1="35" y1="35" x2="65" y2="65" stroke="black" stroke-width="4" />
                                        <line x1="35" y1="65" x2="65" y2="35" stroke="black" stroke-width="4" />
                                    </svg>
                                    break;
                            }
                        </td>
                    }
                }

                </tr>
            }
        </tbody>
    </table>
}

@code {
    // 👇 The value is set from the query string
    [Parameter]
    public string? Name { get; set; }

    public string? Error { get; set; }

    private Game? _game;

    protected override async Task OnInitializedAsync()
    {
        Reset();
    }

    public void Solve()
    {
        try
        {
            Solver.Solve(_game);
            Error = null;
        }
        catch (Exception ex)
        {
            Error = ex.ToString();
        }
    }

    public void Reset()
    {
        Error = null;
        _game = null;
        var path = (HostEnvironment.IsDevelopment() ? ".." : ".") + Path.DirectorySeparatorChar;
        // TODO: Only accept names with alphanumerics
        if (string.IsNullOrEmpty(Name))
        {
            Name = Path.GetFileNameWithoutExtension(Directory.GetFiles(path, "*.csv").FirstOrDefault());
        }

        if (string.IsNullOrEmpty(Name))
        {
            Error = "No puzzle available.";
            return;
        }

        try
        {
            _game = new Game(GameLoader.ReadCsv(new StreamReader(path + Name + ".csv")));
        }
        catch (Exception ex)
        {
            Error = ex.ToString();
        }
    }

    public void Undo()
    {
        _game?.Undo();
    }

    public void Redo()
    {
        _game?.Redo();
    }

    public void UpdateJunctionEdge(MouseEventArgs e, int row, int column, int dir)
    {
        var junction = _game.Board.GetJunction(row, column);
        var oldValue = junction.Edges[dir].HasLine;
        bool? newValue = oldValue switch
        {
            null => true,
            true => false,
            false => null
        };
        _game.MarkJunctionEdge(row, column, dir, newValue, preventOverride: false);
    }

    public void UpdateCellEdge(MouseEventArgs e, int row, int column, int dir)
    {
        var cell = _game.Board[row, column];
        var oldValue = cell.Edges[dir].HasLine;
        bool? newValue = oldValue switch
        {
            null => true,
            true => false,
            false => null
        };
        _game.MarkCellEdge(row, column, dir, newValue, preventOverride: false);
    }
}