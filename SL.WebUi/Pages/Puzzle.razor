@page "/puzzle/{name}"
@using SL.Shared
@using SL.Shared.Structures
@inject NavigationManager NavigationManager

<PageTitle>Puzzle</PageTitle>

@if (Error != null)
{
    <p><em>@Error</em></p>
}
else if (_game == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@Name</h1>

    <button class="btn btn-primary" @onclick="Reset">Reset</button>
    <button class="btn btn-primary" @onclick="Solve">Solve</button>

    var board = _game.Board;

    <table >
        <tbody>

            @for (var r = 0; r < board.Rows; r++)
            {
                <tr>
                    
                @{/* Line above */}
                @for (int c = 0; c < board.Columns; c++)
                {
                    var cell = board[r, c];
                    var edge = cell.Edges[Direction.North];

                    <td align="center" width="20" >
                        <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="50" cy="50" r="20" />
                        </svg>
                    </td>
                    <td align="center" width="20">
                        @switch (edge.HasLine)
                        {
                            case null:
                                <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <line x1="0" y1="50" x2="100" y2="50" stroke="black" stroke-width="8" stroke-dasharray="5 10"/>
                                </svg>
                                break;
                            case true:
                                <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <line x1="0" y1="50" x2="100" y2="50" stroke="black" stroke-width="8" />
                                </svg>
                                break;
                            case false:
                                <div>x</div>
                                break;
                        }
                    </td>
                    }
                    <td align="center" width="20">
                        <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="50" cy="50" r="20" />
                        </svg>
                    </td>
                </tr>
                <tr>

                @{/* West line, hint, East line */}
                @for (int c = 0; c < board.Columns; c++)
                {
                    var cell = board[r, c];

                    var edge = cell.Edges[Direction.West];
                    <td align="center">
                        @switch (edge.HasLine)
                        {
                            case null:
                                <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <line x1="50" y1="0" x2="50" y2="100" stroke="black" stroke-width="8" stroke-dasharray="5 10"/>
                                </svg>
                                break;
                            case true:
                                <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <line x1="50" y1="0" x2="50" y2="100" stroke="black" stroke-width="8" />
                                </svg>
                                break;
                            case false:
                                <div>x</div>
                                break;
                        }
                    </td>

                    <td align="center"> @(cell.Hint?.ToString())</td>


                    // if it's the last column, east line
                    if (c == board.Columns - 1)
                    {
                        edge = cell.Edges[Direction.East];

                        <td align="center">
                            @switch (edge.HasLine)
                            {
                                case null:
                                    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                        <line x1="50" y1="0" x2="50" y2="100" stroke="black" stroke-width="8" stroke-dasharray="5 10"/>
                                    </svg>
                                    break;
                                case true:
                                    <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                        <line x1="50" y1="0" x2="50" y2="100" stroke="black" stroke-width="8" />
                                    </svg>
                                    break;
                                case false:
                                    <div>x</div>
                                    break;
                            }
                        </td>
                    }
                }

                </tr>

                /* if it's the last row, line below */
                @if (r == board.Rows - 1)
                {
                    <tr>
                        @for (int c = 0; c < board.Columns; c++)
                        {
                            <td align="center">
                                <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                    <circle cx="50" cy="50" r="20" />
                                </svg>
                            </td>
                            var cell = board[r, c];
                            var edge = cell.Edges[Direction.South];

                            <td align="center">
                                @switch (edge.HasLine)
                                {
                                    case null:
                                        <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                            <line x1="0" y1="50" x2="100" y2="50" stroke="black" stroke-width="8" stroke-dasharray="5 10"/>
                                        </svg>
                                        break;
                                    case true:
                                        <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                            <line x1="0" y1="50" x2="100" y2="50" stroke="black" stroke-width="8" />
                                        </svg>
                                        break;
                                    case false:
                                        <div>x</div>
                                        break;
                                }
                            </td>
                        }
                        <td align="center">
                            <svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                                <circle cx="50" cy="50" r="20" />
                            </svg>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    // 👇 The value is set from the query string by the SetParametersAsync method
    [Parameter]
    public string Name { get; set; }

    public string Error { get; set; }

    private Game? _game;

    protected override async Task OnInitializedAsync()
    {
        Reset();
    }

    public void Solve()
    {
        Solver.Solve(_game);
    }

    public void Reset()
    {
        // TODO: Only accept names with alphanumerics
        if (!string.IsNullOrEmpty(Name))
        {
            try
            {
                _game = new Game(GameLoader.ReadCsv(new StreamReader(@"..\" + Name + ".csv")));
            }
            catch (Exception ex)
            {
                Error = ex.ToString();
            }
        }
        else
        {
            Error = "No puzzle selected.";
        }
    }
}